"use strict";
var request = require('request');
var qs = require('querystring');
var messages_1 = require('server/common/messages');
var twitch_config_1 = require('server/twitch/twitch-config');
var tsw_config_1 = require('server/tsw/tsw-config');
var log_1 = require('server/lib/log');
var req = request;
if (tsw_config_1.HTTP_PROXY) {
    req = request.defaults({ 'proxy': tsw_config_1.HTTP_PROXY });
}
var AbstractAPI = (function () {
    function AbstractAPI() {
    }
    AbstractAPI.prototype.request = function (query, cb) {
        var me = this;
        query.client_id = twitch_config_1.OAUTH.CLIENT_ID;
        query.state = Math.random();
        var apiURL = twitch_config_1.BASE_URI + this.getPathname();
        var apiHeaders = {
            'Client-ID': twitch_config_1.OAUTH.CLIENT_ID
        };
        var apiPostData;
        if (me.getMethod() === 'GET') {
            apiURL += '?' + qs.stringify(query);
        }
        else if (me.getMethod() === 'POST') {
            apiPostData = query;
        }
        if (this.getOAuth()) {
            apiHeaders['Authorization'] = 'OAuth ' + query.accessToken;
        }
        log_1.default.info("TWITCH API\n                     url=" + apiURL + "\n                     method=" + me.getMethod() + "\n                     headers=" + (apiHeaders ? JSON.stringify(apiHeaders) : ''));
        request({
            method: me.getMethod(),
            url: apiURL,
            proxy: tsw_config_1.HTTP_PROXY,
            headers: apiHeaders,
            form: apiPostData
        }, function (err, res, body) {
            var json;
            if (!err && res.statusCode == 200) {
                try {
                    json = JSON.parse(body);
                }
                catch (e) {
                    log_1.default.error(me.getPathname() + " \u89E3\u6790Twitch\u8FD4\u56DE\u503C\u5931\u8D25 " + e.message);
                    err = messages_1.default.ERR_PARSE_JSON_FAILED;
                }
            }
            if (json) {
                log_1.default.info('请求Twitch接口成功');
                log_1.default.info(JSON.stringify(json));
                cb(null, json);
            }
            else {
                log_1.default.error("err=" + (err || '') + ", statusCode=" + (res ? res.statusCode : '') + ", body=" + JSON.stringify(body));
                cb(messages_1.default.ERR_REQUEST_TWITCH_API_FAILED, {});
            }
        });
    };
    return AbstractAPI;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AbstractAPI;
//# sourceMappingURL=AbstractAPI.js.map