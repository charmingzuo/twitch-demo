import * as request from 'request';
import qs = require('querystring');
import fileLog from '../../lib/fileLog'
import messages from '../../common/messages'
import {OAUTH, BASE_URI} from '../twitch-config'
import {HTTP_PROXY} from '../../tsw/tsw-config';

let req = request;
if (HTTP_PROXY) {
    req = request.defaults({'proxy': HTTP_PROXY});
}

// req.debug = true;
export default AbstractAPI;

abstract class AbstractAPI {

    method?: string = 'GET';
    oauth?: boolean = false;
    abstract pathname?: string;

    /**
     * 发请求
     * @param {*} query
     * @param {String} query.accessToken
     * @param {Function} cb
     */
    request  (query: any, cb: Function) {
        let me = this;

        let logger = plug('logger');

        // let query = Object.assign({}, {
        //     client_id: OAUTH.CLIENT_ID,
        //     state: Math.random()
        // }, args);
        query.client_id = OAUTH.CLIENT_ID;
        query.state = Math.random();

        let apiURL = BASE_URI + this.pathname;
        let apiHeaders = {
            'Client-ID': OAUTH.CLIENT_ID
        };
        let apiPostData;

        if (this.method === 'GET') {
            apiURL += '?' + qs.stringify(query);
        }
        else if (this.method === 'POST') {
            apiPostData = query;
        }

        if (this.oauth) {
            apiHeaders['Authorization'] = 'OAuth ' + query.accessToken;
        }

        logger.info(`[TWITCH API]
                     url=${apiURL}
                     headers=${apiHeaders ? JSON.stringify(apiHeaders) : ''}`);

        //if (args.oAuthToken) {
        //    headers['Authorization'] = 'OAuth ' + args.oAuthToken;
        //}

        request({
            method: me.method,
            url: apiURL,
            proxy: HTTP_PROXY,
            headers: apiHeaders,
            form: apiPostData
        }, (err, res, body) => {
            let json;
            if (!err && res.statusCode == 200) {
                try {
                    json = JSON.parse(body);
                } catch (e) {
                    logger.error(`${me.pathname} 解析Twitch返回值失败 ${e.message}`);
                    err = messages.ERR_PARSE_JSON_FAILED;
                }
            }

            if (json) {
                logger.info('请求Twitch接口成功');
                fileLog.info(JSON.stringify(json));
                cb(null, json);
            }
            else {
                logger.error(`err=${(err || '')}, statusCode=${res ? res.statusCode : ''}, body=${JSON.stringify(body)}`);
                cb(messages.ERR_REQUEST_TWITCH_API_FAILED, {});
            }

        });

    }
}

let log2file = (s) => {
    "use strict";

};
