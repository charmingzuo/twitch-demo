let request = require('request');
const qs = require('querystring');
const fileLog = require('../lib/log/fileLog');
const messages = require('../common/messages');
const twitchConfig = require('./twitch-config');
const twitchOauth = twitchConfig.OAUTH;
const httpProxy = require('../tsw/tsw-config').httpProxy;

if (httpProxy) {
    request = request.defaults({'proxy': httpProxy});
}

//require('request').debug = true;


module.exports = {

    apis: {
        CHANNELS: {
            pathname: '/channels',
            method: 'GET',
            oauth: true
        },
        STREAMS: {
            pathname: '/streams',
            method: 'GET'
        },
        GAMES_TOP: {
            pathname: '/games/top',
            method: 'GET'
        },
        OAUTH2_TOKEN: {
            pathname: '/oauth2/token',
            method: 'POST'
        }
    },

    request: (api, args, cb)=> {
        "use strict";

        let logger = plug('logger');

        let query = Object.assign({}, {
            client_id: twitchOauth.CLIENT_ID,
            state: Math.random()
        }, args);

        let apiURL = twitchConfig.BASE_URI + api.pathname;
        let apiHeaders = {
            'Client-ID': twitchOauth.CLIENT_ID
        };
        let apiPostData;

        if (api.method === 'GET') {
            apiURL += '?' + qs.stringify(query);
        }
        else if (api.method === 'POST') {
            apiPostData = query;
        }

        if (api.oauth) {
            apiHeaders['Authorization'] = 'OAuth ' + args.accessToken;
        }


        logger.info(`[TWITCH API]
                     url=${apiURL}
                     headers=${apiHeaders ? JSON.stringify(apiHeaders) : ''}`);

        //if (args.oAuthToken) {
        //    headers['Authorization'] = 'OAuth ' + args.oAuthToken;
        //}

        request({
            method: api.method,
            url: apiURL,
            proxy: httpProxy,
            headers: apiHeaders,
            form: apiPostData
        }, (err, res, body)=> {
            let json;
            if (!err && res.statusCode == 200) {
                try {
                    json = JSON.parse(body);
                } catch (e) {
                    logger.error(`${apiName} 解析Twitch返回值失败 ${e.message}`);
                    err = messages.ERR_PARSE_JSON_FAILED;
                }
            }

            if (json) {
                logger.info('请求Twitch接口成功');
                fileLog.info(JSON.stringify(json));
                cb(null, json);
            }
            else {
                logger.error(`err=${(err || '')}, status=${res ? res.status : ''}, body=${JSON.stringify(body)}`);
                cb(messages.ERR_REQUEST_TWITCH_API_FAILED, {});
            }

        });

    }

};

let log2file = (s)=> {
    "use strict";

};